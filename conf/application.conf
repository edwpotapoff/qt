pekko {
  loglevel = "DEBUG" # "INFO"

  actor {
    provider = cluster

    serialization-bindings {
      "io.qt.CborSerializable" = jackson-cbor
    }

    # Диспечер используемый для блокирующих операций, обращеня к JDBC, к файлам
    default-blocking-io-dispatcher {
      type = "Dispatcher"
      executor = "thread-pool-executor"
      throughput = 1

      thread-pool-executor {
        fixed-pool-size = 16
      }
    }
  }
  remote {
    artery {
      canonical.hostname = "127.0.0.1"
      canonical.port = 0
    }
  }
  cluster {
    seed-nodes = [
      "pekko://ClusterSystem@127.0.0.1:25251"
      # , "pekko://ClusterSystem@127.0.0.1:25252"
    ]

    downing-provider-class = "org.apache.pekko.cluster.sbr.SplitBrainResolverProvider"
  }

  http.client {

    # The time period within which the TCP connecting process must be completed.
    connecting-timeout = 10s

    # The time after which an idle connection will be automatically closed.
    # Set to `infinite` to completely disable idle timeouts.
    idle-timeout = infinite

    host-connection-pool {
      # Must be a power of 2 and > 0!
      max-open-requests = 128
    }
  }
}

qt {
  percentile = [80, 90, 95, 99] # список расчитываемых процентилей

  strictTamplateStr = false # шаблоны строк $ могут быть без {}

  # timeout ответа ноды на запрос веса. Если ответ дольше, то нода не учитывается
  client.node.timeout = 2 s

  # если нагрузка на скрипт меньше, чем эта rps (0.00028 - один раз в час), то не запускаем
  load.threshold = 0.00028

  # если длительность скрипта превысит пейсинг умноженный на данный коэффициент, то выводить сообщение об этом
  pacing.warn-threshold = 1.5

  # использовать простые синонимы в компиляторе АСИТ
  simpleSynonyms = true

  # ошибка, если нет переменной
  noVarError = true

  influx {
    enable = false
    url = "http://localhost:8086/"
    #username
    #password
    db = "qt"
    measurement = "jmeter"
  }

  cacheMaxCapacity {
      regex  = 200 # Cache size for the compiled regexes, set to 0 to disable caching

      xpath  = 200 # Cache size for the compiled XPath queries,  set to 0 to disable caching

      jsonPath  = 200 # Cache size for the compiled jsonPath queries, set to 0 to disable caching

      css = 200 # пока не используется

  }
}

app {
  sqlDatabase: [
    {
      componentName: "dvdrental"
      dbUrl: "jdbc:postgresql://localhost:55000/dvdrental?user=postgres&password=postgrespw" #
      # username: "postgres"
      # password: "postgrespw"
    }
  ]

  #https {
  #  file: "./keystore/keystore.jks" #type PKCS12
  #  password: "123456"
  #}

  kafka: [{
    componentName: "producer"
    config: [
      "bootstrap.servers=localhost:29092"
      , "key.serializer=org.apache.kafka.common.serialization.StringSerializer"
      , "value.serializer=org.apache.kafka.common.serialization.StringSerializer"
    ]
  }, {
    componentName: "consumer"
    config: [
      "bootstrap.servers=localhost:29092"
      , "key.deserializer=org.apache.kafka.common.serialization.StringDeserializer"
      , "value.deserializer=org.apache.kafka.common.serialization.StringDeserializer"
      , "group.id=consuming"
      , "auto.offset.reset=earliest"
    ]
  }]

  httpConfigs: [{
    componentName: "lh"
    endpoint.url: "http://localhost:8080"
    endpoint.headers: {
      type: GET
      status: 200
    }
    message.headers: {
      "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:50.0) Gecko/20100101 Firefox/50.0"
      "Connection": "keep-alive"
    }
  },
    {
      componentName: "lhp"
      endpoint.url: "http://localhost:8080"
      endpoint.headers: {
        type: POST
        status: 200
        timeout: 700
      }
      message.headers: {
        "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:50.0) Gecko/20100101 Firefox/50.0"
        "Connection": "keep-alive"
      }
    }
  ]
}
